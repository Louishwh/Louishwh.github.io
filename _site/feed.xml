<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Atomix</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 04 Apr 2020 08:32:28 +0800</pubDate>
    <lastBuildDate>Sat, 04 Apr 2020 08:32:28 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Golang</title>
        <description>&lt;h3 id=&quot;go基础啊&quot;&gt;GO基础啊&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Unknwon/go-fundamental-programming&quot;&gt;基础语法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md&quot;&gt;入门指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gowalker.org/&quot;&gt;Go开源项目&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 09 Dec 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/12/09/Golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/12/09/Golang%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</guid>
        
        <category>Golang</category>
        
        
        <category>【编程语言】</category>
        
      </item>
    
      <item>
        <title>RSA加密技术</title>
        <description>&lt;h3 id=&quot;参考文章&quot;&gt;参考文章&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;cnblogs.com/pcheng/p/9629621.html&quot;&gt;RSA加密技术1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 19 Nov 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/19/RSA%E5%8A%A0%E5%AF%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/19/RSA%E5%8A%A0%E5%AF%86/</guid>
        
        <category>【加密】</category>
        
        
        <category>【编程常识】</category>
        
      </item>
    
      <item>
        <title>RSA加密</title>
        <description>&lt;h4 id=&quot;参考文章&quot;&gt;参考文章&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/1208652?fr=aladdin&quot;&gt;非对称加密&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/ca659dbc6f46&quot;&gt;RSA数学原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://baike.baidu.com/item/RSA%E7%AE%97%E6%B3%95/263310?fromtitle=RSA&amp;amp;fromid=210678&amp;amp;fr=aladdin&quot;&gt;RSA算法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/gulang03/article/details/81176133&quot;&gt;RSA原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/jijianshuai/article/details/80582187&quot;&gt;RSA原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/NathanYang/p/9182929.html&quot;&gt;RSA原理&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/1944850?fr=aladdin&quot;&gt;欧拉函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E4%BA%92%E8%B4%A8%E6%95%B0/6147106?fr=aladdin&quot;&gt;互质数&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://stuvel.eu/python-rsa-doc/usage.html#generating-keys&quot;&gt;Python-RSA&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/gulang03/article/details/81175854&quot;&gt;引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;过程梳理&quot;&gt;过程梳理&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;随机取两个素数数: P、Q&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;计算素数的最小公倍数: m = P * Q&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;计算欧拉数: eular = (p -1 ) * (q - 1)
        &lt;ul&gt;
          &lt;li&gt;3.1 计算加密指数 e&lt;/li&gt;
        &lt;/ul&gt;
        &lt;ul&gt;
          &lt;li&gt;3.1.1 生成公钥
    - 3.2 计算模反元素&lt;/li&gt;
          &lt;li&gt;3.2.1 生成私钥&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;ol&gt;
      &lt;li&gt;模幂运算
        &lt;ul&gt;
          &lt;li&gt;密文&lt;/li&gt;
          &lt;li&gt;明文&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;数学知识&quot;&gt;数学知识&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;素数&lt;/li&gt;
  &lt;li&gt;最小公倍数&lt;/li&gt;
  &lt;li&gt;欧拉函数&lt;/li&gt;
  &lt;li&gt;幂运算&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 18 Nov 2019 12:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/18/RSA%E5%8A%A0%E5%AF%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/18/RSA%E5%8A%A0%E5%AF%86/</guid>
        
        <category>【RSA加密】</category>
        
        
        <category>【非对称加密】</category>
        
      </item>
    
      <item>
        <title>算法指南</title>
        <description>&lt;h3 id=&quot;算法类型&quot;&gt;算法类型&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_38918259/article/details/80480194&quot;&gt;重要的几个算法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kb.cnblogs.com/page/210687/&quot;&gt;10大基础算法-1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zkl99999/article/details/51093174&quot;&gt;10大基础算法-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;压缩算法&quot;&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/2762648?fr=aladdin&quot;&gt;压缩算法&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;工具&quot;&gt;工具&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexcrichton/rust-compress&quot;&gt;压缩算法-Rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/richox/orz&quot;&gt;压缩工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/pansaky/article/details/90641343&quot;&gt;ZIP压缩算法原理解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;思想&quot;&gt;思想&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_38607741/article/details/78555330&quot;&gt;最基本5种算法思想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 18 Nov 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/18/%E7%AE%97%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/18/%E7%AE%97%E6%B3%95/</guid>
        
        <category>【算法】</category>
        
        
        <category>【编程常识】</category>
        
      </item>
    
      <item>
        <title>Libra结构</title>
        <description>&lt;h3 id=&quot;文件结构&quot;&gt;文件结构&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;admission_control
    &lt;ul&gt;
      &lt;li&gt;Libra的公共API接口，它用于接收来自客户端的公共gRPC请求&lt;/li&gt;
      &lt;li&gt;准入控制（AC）处理于来自客户的两种类型的请求
        &lt;ul&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;提交交易: 向关联的验证器提交交易
                &lt;ul&gt;
                  &lt;li&gt;验证过程&lt;/li&gt;
                &lt;/ul&gt;
                &lt;ul&gt;
                  &lt;li&gt;首先检查交易签名&lt;/li&gt;
                  &lt;li&gt;然后由vm_validator验证交易&lt;/li&gt;
                  &lt;li&gt;✅ 通过所有验证
                    &lt;ul&gt;
                      &lt;li&gt;发送到内存池
                        &lt;ul&gt;
                          &lt;li&gt;提交成功&lt;/li&gt;
                          &lt;li&gt;提交失败&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                    &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;更新最新分布式账本 - 查询存储，例如帐户状态，交易日志，验证等
                &lt;ul&gt;
                  &lt;li&gt;请求将直接传递到存储进行查询&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;benchmark
    &lt;ul&gt;
      &lt;li&gt;Libra的公共API接口，它用于接收来自客户端的公共gRPC请求&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;client
    &lt;ul&gt;
      &lt;li&gt;RPC客户端上的Rust的封装&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;common&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;config&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;consensus
    &lt;ul&gt;
      &lt;li&gt;共识协议组件使用LibraBFT共识协议进行状态机复制。&lt;/li&gt;
      &lt;li&gt;共识组件主要在 Actor 程序模块中实现
        &lt;ul&gt;
          &lt;li&gt;使用消息传递在不同的子组件之间进行通信&lt;/li&gt;
          &lt;li&gt;tokio 框架用作任务运行时&lt;/li&gt;
          &lt;li&gt;共识数据结构 BlockStore
            &lt;ul&gt;
              &lt;li&gt;TxnManager 是内存池组件的接口，支持拉取交易以及删除已提交的交易。&lt;/li&gt;
              &lt;li&gt;StateComputer 是访问执行组件的接口。&lt;/li&gt;
              &lt;li&gt;BlockStore 维护提议块树，块执行，投票，仲裁证书和持久存储。&lt;/li&gt;
              &lt;li&gt;EventProcessor 负责处理各个事件。&lt;/li&gt;
              &lt;li&gt;Pacemaker 负责共识协议的活跃性。&lt;/li&gt;
              &lt;li&gt;SafetyRules 负责共识协议的安全性。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;所有共识消息都由其创建者签名，并由其接收者验证。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;contributing&lt;/li&gt;
  &lt;li&gt;crypto
    &lt;ul&gt;
      &lt;li&gt;加密组件承载我们在Libra中使用的关于加密所有实现：散列，签名和密钥派生/生成。&lt;/li&gt;
      &lt;li&gt;Libra 使用几种密码算法:
        &lt;ul&gt;
          &lt;li&gt;SHA-3 作为主要的哈希函数。&lt;/li&gt;
          &lt;li&gt;X25519 用于密钥交换。&lt;/li&gt;
          &lt;li&gt;Ed25519 用于签名。&lt;/li&gt;
          &lt;li&gt;HKDF: 基于HMAC的Extract-and-Expand密钥衍生函数（HKDF），基于 RFC 5869。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;docker&lt;/li&gt;
  &lt;li&gt;documentation&lt;/li&gt;
  &lt;li&gt;executor
    &lt;ul&gt;
      &lt;li&gt;执行组件的主要实现&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;language
    &lt;ul&gt;
      &lt;li&gt;vm
        &lt;ul&gt;
          &lt;li&gt;虚拟机 (VM), 它包含字节码格式、字节码解释器和执行交易块的基础设施。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;bytecode_verifier
        &lt;ul&gt;
          &lt;li&gt;字节码验证器, 其中包含一个静态分析工具，用于拒绝无效的Move字节码。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;IR： intermediate representation
        &lt;ul&gt;
          &lt;li&gt;Move中间层表示编译器, 它将可读的程序文本编译成Move字节码.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stdlib
        &lt;ul&gt;
          &lt;li&gt;标准库, 其中包含 LibraAccount 和 LibraCoin 等核心系统模块的Move IR代码。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;functional_tests
        &lt;ul&gt;
          &lt;li&gt;一些测试 ，用于虚拟机，字节码验证程序和编译器。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;compiler
        &lt;ul&gt;
          &lt;li&gt;Move IR编译器将Move IR编译为其字节码表示形式。&lt;/li&gt;
          &lt;li&gt;bytecode verifier: 验证编译后的字节码的语义。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;libra-node&lt;/li&gt;
  &lt;li&gt;libra-swarm&lt;/li&gt;
  &lt;li&gt;mempool
    &lt;ul&gt;
      &lt;li&gt;准入控制（AC）模块将交易发送到内存池(Mempool)&lt;/li&gt;
      &lt;li&gt;在共识模块提交之前，内存池将会把交易保留一段时间&lt;/li&gt;
      &lt;li&gt;共识模块从内存池获取交易，内存池不会将交易推向共识&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;network
    &lt;ul&gt;
      &lt;li&gt;网络组件向验证器的其他组件提供点对点网络服务。
        &lt;ul&gt;
          &lt;li&gt;RPC, 用于远程过程调用&lt;/li&gt;
          &lt;li&gt;DirectSend, 用于向单个接收方发送“即发即忘”样式的消息&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;网络组件使用
        &lt;ul&gt;
          &lt;li&gt;Multiaddr ：用于对等寻址的方案。&lt;/li&gt;
          &lt;li&gt;TCP ：用于可靠传输。&lt;/li&gt;
          &lt;li&gt;Noise ：用于身份验证和点对点加密。&lt;/li&gt;
          &lt;li&gt;Yamux ：在单个链接上多路复用子流（substreams）。&lt;/li&gt;
          &lt;li&gt;推送类型的 gossip ：用于对节点发现。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;网络组件中的不同子组件:
        &lt;ul&gt;
          &lt;li&gt;NetworkProvider
            &lt;ul&gt;
              &lt;li&gt;向客户端公开网络API。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Peer Manager 
  — 侦听入链接及主动连接网络上的其他对等节点。&lt;/li&gt;
          &lt;li&gt;Connectivity Manager
            &lt;ul&gt;
              &lt;li&gt;当且仅当它是符合条件的网络成员时，才能确保我们保持与节点的连接。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Discovery
  — 使用推送式来发现新的节点并更新现有节点的地址。&lt;/li&gt;
          &lt;li&gt;Health Checker 
  — 执行定期活动探测以确保对等/连接的健康状况。&lt;/li&gt;
          &lt;li&gt;Direct Send 
  — 允许向/从远程对等节点发送/接收消息。&lt;/li&gt;
          &lt;li&gt;RPC 
  — 允许向/从其他对等节点发送/接收RPC。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;rust-toolchain&lt;/li&gt;
  &lt;li&gt;scripts&lt;/li&gt;
  &lt;li&gt;state-synchronizer&lt;/li&gt;
  &lt;li&gt;storage
    &lt;ul&gt;
      &lt;li&gt;存储模块为Libra区块链上的所有数据集以及Libra Core内部使用的必要数据提供可靠和高效的持久存储。&lt;/li&gt;
      &lt;li&gt;存储模块目的:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;保留区块链数据，特别是验证方通过共识协议达成一致的交易及其输出。&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;ol&gt;
              &lt;li&gt;为任何查询提供一个带有Merkle证明的响应，该查询要求部分区块链数据。&lt;/li&gt;
            &lt;/ol&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;target&lt;/li&gt;
  &lt;li&gt;terraform&lt;/li&gt;
  &lt;li&gt;testsuite&lt;/li&gt;
  &lt;li&gt;types&lt;/li&gt;
  &lt;li&gt;vm-validator&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 11 Nov 2019 12:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/11/Libra-%E7%BB%93%E6%9E%84/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/11/Libra-%E7%BB%93%E6%9E%84/</guid>
        
        <category>【Libra】</category>
        
        
        <category>【区块链】</category>
        
      </item>
    
      <item>
        <title>Rust标准库</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://doc.rust-lang.org/std/&quot;&gt;参考一&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/bbdxf/article/details/87890128&quot;&gt;参考二&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 06 Nov 2019 12:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/06/Rust%E6%A0%87%E5%87%86%E5%BA%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/06/Rust%E6%A0%87%E5%87%86%E5%BA%93/</guid>
        
        <category>【Rust】</category>
        
        
        <category>【编程语言】</category>
        
      </item>
    
      <item>
        <title>椭圆曲线加解密算法</title>
        <description>&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/e41bc1eb1d81&quot;&gt;数学原理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;名称解释&quot;&gt;名称解释&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;椭圆曲线加密算法，即: Elliptic Curve Cryptography，简称ECC
    &lt;ul&gt;
      &lt;li&gt;基于椭圆曲线数学理论实现的一种非对称加密算法。&lt;/li&gt;
      &lt;li&gt;椭圆曲线在密码学中的使用，是1985年由Neal Koblitz和Victor Miller分别独立提出的。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;椭圆曲线签名算法，即: ECDSA&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 01 Nov 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/01/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/01/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%8A%A0%E5%AF%86/</guid>
        
        <category>【工具】</category>
        
        
        <category>【密码学】</category>
        
      </item>
    
      <item>
        <title>正则表达式</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.runoob.com/regexp/regexp-intro.html&quot;&gt;参考文档1&lt;/a&gt;&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;本文解决四个问题&quot;&gt;本文解决四个问题&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;正则表达式能够干什么?&lt;/li&gt;
  &lt;li&gt;正则表达式怎么用?&lt;/li&gt;
  &lt;li&gt;有哪些常用的正则实际例子?&lt;/li&gt;
  &lt;li&gt;正则在Python、Swift、Kotlin中的使用方法?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;正则表达式能够干什么&quot;&gt;正则表达式能够干什么?&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;数据验证
    &lt;ul&gt;
      &lt;li&gt;字符串是否具有固定的格式&lt;/li&gt;
      &lt;li&gt;例如: 身份证号、手机号、邮箱、信用卡、BTC地址等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;文本替换
    &lt;ul&gt;
      &lt;li&gt;识别出字符串内的特定文本, 删除或替换这些文本.&lt;/li&gt;
      &lt;li&gt;例如: 将html中的标签全部去除&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;提取子字符串
    &lt;ul&gt;
      &lt;li&gt;识别出符合特定文本, 并提取出来&lt;/li&gt;
      &lt;li&gt;获取网页中的所有URL、手机号、邮箱&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;正则表达式怎么用&quot;&gt;正则表达式怎么用?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;字符类型
    &lt;ul&gt;
      &lt;li&gt;普通字符
        &lt;ul&gt;
          &lt;li&gt;非打印字符&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;特殊字符
        &lt;ul&gt;
          &lt;li&gt;特殊
            &lt;ul&gt;
              &lt;li&gt;() 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。&lt;/li&gt;
              &lt;li&gt;. 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。&lt;/li&gt;
              &lt;li&gt;[ 标记一个中括号表达式的开始。要匹配 [，请使用 [。&lt;/li&gt;
              &lt;li&gt;\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。&lt;/li&gt;
              &lt;li&gt;|	指明两项之间的一个选择。要匹配 |，请使用 \ |。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;限定符
            &lt;ul&gt;
              &lt;li&gt;含义: 指定正则表达式的一个给定组件必须要出现多少次才能满足匹配&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; 匹配前面的子表达式零次或多次。&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 匹配前面的子表达式一次或多次。&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; 匹配前面的子表达式零次或一次。&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{n}&lt;/code&gt; n是一个非负整数。匹配确定的 n 次。&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{n,}&lt;/code&gt; n是一个非负整数。至少匹配n 次。&lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{n,m}&lt;/code&gt; m和n均为非负整数，其中n &amp;lt;= m。最少匹配 n 次且最多匹配 m 次。&lt;/li&gt;
              &lt;li&gt;⚠️ &lt;code class=&quot;highlighter-rouge&quot;&gt;*、+&lt;/code&gt; 限定符都是贪婪的, 在它们的后面加上一个?就可以实现非贪婪或最小匹配。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;定位符
            &lt;ul&gt;
              &lt;li&gt;含义: 定位符使您能够将正则表达式固定到行首或行尾。&lt;/li&gt;
              &lt;li&gt;^ 匹配输入字符串开始的位置。&lt;/li&gt;
              &lt;li&gt;$ 匹配输入字符串结尾的位置。&lt;/li&gt;
              &lt;li&gt;\b 匹配一个单词边界，即字与空格间的位置。&lt;/li&gt;
              &lt;li&gt;\B 非单词边界匹配。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;运算符优先级
    &lt;ul&gt;
      &lt;li&gt;\	转义符&lt;/li&gt;
      &lt;li&gt;(), (?:), (?=), []			圆括号和方括号&lt;/li&gt;
      &lt;li&gt;*, +, ?, {n}, {n,}, {n,m}	  	限定符&lt;/li&gt;
      &lt;li&gt;^, $, \任何元字符、任何字符    	定位点和序列&lt;/li&gt;
      &lt;li&gt;|								替换，”或”操作&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;规则
    &lt;ul&gt;
      &lt;li&gt;基本模式匹配
        &lt;ul&gt;
          &lt;li&gt;^ $&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;字符簇
        &lt;ul&gt;
          &lt;li&gt;[[:alpha:]]	任何字母&lt;/li&gt;
          &lt;li&gt;[[:digit:]]	任何数字&lt;/li&gt;
          &lt;li&gt;[[:alnum:]]	任何字母和数字&lt;/li&gt;
          &lt;li&gt;[[:space:]]	任何空白字符&lt;/li&gt;
          &lt;li&gt;[[:upper:]]	任何大写字母&lt;/li&gt;
          &lt;li&gt;[[:lower:]]	任何小写字母&lt;/li&gt;
          &lt;li&gt;[[:punct:]]	任何标点符号&lt;/li&gt;
          &lt;li&gt;[[:xdigit:]]	任何16进制的数字，相当于[0-9a-fA-F]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;确定重复出现
        &lt;ul&gt;
          &lt;li&gt;特殊字符 * 与 {0,} 是相等的，它们都代表着 0 个或多个前面的内容 。&lt;/li&gt;
          &lt;li&gt;所有包含一个以上的字母、数字或下划线的字符串
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^[a-zA-Z0-9_]{1,}$&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;所有的正整数
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^[1-9][0-9]{0,}$&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;所有的整数
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^\-{0,1}[0-9]{1,}$&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;所有的浮点数
            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^[-]?[0-9]+\.?[0-9]+$&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-有哪些常用的正则实际例子&quot;&gt;3. 有哪些常用的正则实际例子?&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;匹配双字节汉字:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[^u4e00-u9fa5]&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配中文字符
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[u4e00-u9fa5]&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配HTML标记:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;(S*?)[^&amp;gt;]*&amp;gt;.*?|&amp;lt;.*? /&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配HTML标签:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配空白行:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ns*r&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配首尾空白字符
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^s*|s*$&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配Email地址
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配网址URL的正则表达式：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http://([w-]+.)+[w-]+(/[w- ./?%&amp;amp;=]*)?&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配国内电话号码：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[0-9]{3}-[0-9]{8}|[0-9]{4}-[0-9]{7}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配ip地址：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[1-2]?[0-9]{1,2}.[1-2]?[0-9]{1,2}.[1-2]?[0-9]{1,2}.[1-2]?[0-9]{1,2}&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;匹配26个英文字母字符串
    &lt;ul&gt;
      &lt;li&gt;^[A-Za-z]+$　&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;验证一年的12个月
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^(0?[1-9]|1[0-2])$&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;验证一个月的31天：
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^((0?[1-9])|((1|2)[0-9])|30|31)$&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4-pythonswiftkotlin中的使用&quot;&gt;4. Python、Swift、Kotlin中的使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Python:
    &lt;blockquote&gt;
      &lt;p&gt;import re&lt;/p&gt;

      &lt;p&gt;re.match( r’&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;’, line, re.M | re.I)&lt;/p&gt;

      &lt;p&gt;re.findall(“&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;”, “123444-1222”)&lt;/p&gt;

      &lt;p&gt;re.compile(“&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;”).sub(‘replace string’, “origin string”)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Kotlin:
    &lt;blockquote&gt;
      &lt;p&gt;Regex(“&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;”).matches(“string”)&lt;/p&gt;

      &lt;p&gt;Regex(“&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;”).findAll(“&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;”)&lt;/p&gt;

      &lt;p&gt;Regex(“&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;”).replace(“new string”, “replace string”)&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Swift:
    &lt;blockquote&gt;
      &lt;p&gt;var string = “origin string”&lt;/p&gt;

      &lt;p&gt;let pattern = “&amp;lt;/?[a-zA-Z]+[^&amp;gt;&amp;lt;]*&amp;gt;”&lt;/p&gt;

      &lt;p&gt;let regex = try? NSRegularExpression(pattern: pattern, options: [])&lt;/p&gt;

      &lt;p&gt;if let results = regex?.matches(in: acount, options: [], range: NSRange(location: 0, length: acount.count)), results.count != 0 {&lt;/p&gt;

      &lt;p&gt;  for result in results{&lt;/p&gt;

      &lt;p&gt;     let string = (acount as NSString).substring(with: result.range)&lt;/p&gt;

      &lt;p&gt;   }&lt;/p&gt;

      &lt;p&gt;}&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;正则不难很有用, 能积累点最好.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Wed, 30 Oct 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/30/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
        
        <category>【工具】</category>
        
        
        <category>【编程常识】</category>
        
      </item>
    
      <item>
        <title>深入理解操作系统2</title>
        <description>&lt;ol&gt;
  &lt;li&gt;进制转换
    &lt;ul&gt;
      &lt;li&gt;2进制 🏁&lt;/li&gt;
      &lt;li&gt;8进制 🏁&lt;/li&gt;
      &lt;li&gt;10进制 🏁&lt;/li&gt;
      &lt;li&gt;12进制&lt;/li&gt;
      &lt;li&gt;16进制 🏁&lt;/li&gt;
      &lt;li&gt;20进制&lt;/li&gt;
      &lt;li&gt;60进制&lt;/li&gt;
      &lt;li&gt;100进制&lt;/li&gt;
      &lt;li&gt;365进制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sun, 20 Oct 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F2/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/20/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F2/</guid>
        
        <category>【读书】</category>
        
        
        <category>【操作系统】</category>
        
      </item>
    
      <item>
        <title>深入理解操作系统1</title>
        <description>&lt;p&gt;&lt;img src=&quot;/images/2019-10-19-深入理解操作系统.jpg&quot; alt=&quot;深入理解操作系统&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 19 Oct 2019 10:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/10/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/10/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F1/</guid>
        
        <category>【读书】</category>
        
        
        <category>【操作系统】</category>
        
      </item>
    
  </channel>
</rss>
